# Sample YAML file to validate and export an ARM template into a build artifact
# Requires a package.json file located in the target repository

trigger:
- main #collaboration branch

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: build
  displayName: Build
    
  jobs:

  - job: Create_ARM_Templates
 
    # Installs Node and the npm packages saved in your package.json file in the build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: '$(Build.Repository.LocalPath)' #replace with the package.json folder
        verbose: true
      displayName: 'Install npm package'


    # Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
    # Enter the appropriate subscription and name for the source factory.
   
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: '$(Build.Repository.LocalPath)' #replace with the package.json folder
        customCommand: 'run build validate $(Build.Repository.LocalPath) /subscriptions/1a2f26c6-0d89-4a8b-98d9-c4ca8d77477e/resourceGroups/FACTORY/providers/Microsoft.DataFactory/factories/testfactory553'
      displayName: 'Validate'
    

    # Validate and then generate the ARM template into the destination folder, which is the same as selecting "Publish" from the UX.
    # The ARM template generated isn't published to the live version of the factory. Deployment should be done by using a CI/CD pipeline. 
   
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: '$(Build.Repository.LocalPath)' #replace with the package.json folder
        customCommand: 'run build export $(Build.Repository.LocalPath) /subscriptions/1a2f26c6-0d89-4a8b-98d9-c4ca8d77477e/resourceGroups/FACTORY/providers/Microsoft.DataFactory/factories/testfactory553 "ArmTemplate"'
      displayName: 'Validate and Generate ARM template'
  

    # Publish the artifact to be used as a source for a release pipeline.

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.Repository.LocalPath)/ArmTemplate' #replace with the package.json folder
        artifactName: 'ArmTemplates'


- stage: dev
  displayName: Release Development  

  jobs:
  - job: Deploy_Data_Factory
    steps:
    
    # First the artifact needs to be downloaded, to make sure we have the ArmTemplates folder

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'ArmTemplates'
        downloadPath: '$(System.ArtifactsDirectory)'
      
    # Publish the templates in a regular way as was done in the release stage. For Test and production
    # we can override the parameters

    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'factory_test_sp'
        subscriptionId: '1a2f26c6-0d89-4a8b-98d9-c4ca8d77477e'
        action: 'Create Or Update Resource Group'
        resourceGroupName: FACTORY
        location: 'West Europe'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.ArtifactsDirectory)/ArmTemplates/ARMTemplateForFactory.json'
        csmParametersFile: '$(System.ArtifactsDirectory)/ArmTemplates/ARMTemplateParametersForFactory.json'
        deploymentMode: 'Incremental'
